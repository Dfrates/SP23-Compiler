package ADT;
/*
Name: Daniel Frates
Course: CS 4100
Term: Spring 2023
 */

import java.io.IOException;
import java.io.*;

public class Lexical {
    private final int MAX_IDENT_LENGTH = 20;  //Max length of an identifier
    private final int MAX_INT_LENGTH = 6;     //Max length of a number
    private final int MAX_FLOAT_LENGTH = 12;  //Max length of a float
    private final char VAR = 'v';             //char for variable
    private final char CONST = 'c';           //char for constant
    private final int INIT_VALUE = 0;         //initial value for variables
    private File file;                        //File to be read for input
    private FileReader filereader;            //Reader, Java reqd
    private BufferedReader bufferedreader;    //Buffered, Java reqd
    private String line;                      //Current line of input from file
    private int linePos;                      //Current character position
    //  in the current line
    private SymbolTable saveSymbols;          //SymbolTable used in Lexical
    //  sent as parameter to construct
    private boolean EOF;                      //End Of File indicator
    private boolean echo;                     //true means echo each input line
    private boolean printToken;               //true to print found token here
    private int lineCount;                    //line #in file, for echo-ing
    private boolean needLine;                 //track when to read a newline
    //Tables to hold the reserve words and the mnemonics for token codes
    private final int sizeReserveTable = 100;
    private ReserveTable reserveWords = new ReserveTable(sizeReserveTable); //a few more than # reserves
    private ReserveTable mnemonics = new ReserveTable(sizeReserveTable); //a few more than # reserves

    public Lexical(String filename, SymbolTable symbols, boolean echoOn) {
        saveSymbols = symbols;  //map the initialized parameter to the local ST
        echo = echoOn;          //store echo status
        lineCount = 0;          //start the line number count
        line = "";              //line starts empty
        needLine = true;        //need to read a line
        printToken = false;     //default OFF, do not print tokesn here
        //  within GetNextToken; call setPrintToken to
        //  change it publicly.
        linePos = -1;           //no chars read yet
        //call initializations of tables
        initReserveWords(reserveWords);
        initMnemonics(mnemonics);
        //set up the file access, get first character, line retrieved 1st time
        try {
            file = new File(filename);    //creates a new file instance
            filereader = new FileReader(file);   //reads the file
            bufferedreader = new BufferedReader(filereader);  //creates a buffering character input stream
            EOF = false;
            currCh = GetNextChar();
        } catch (IOException e) {
            EOF = true;
            e.printStackTrace();
        }
    }

    // inner class "token" is declared here, no accessors needed
    public class token {
        public String lexeme;
        public int code;
        public String mnemonic;
        token() {
            lexeme = "";
            code = 0;
            mnemonic = "";
        }
    }

    // given a mnemonic, return its reserve word
    public String reserveFor(String mnemonic) {
        return reserveWords.LookupCode(mnemonics.LookupName(mnemonic));
    }

    // Public access to the current End Of File status
    public boolean EOF() {
        return EOF;
    }
    // DEBUG enabler, turns on/OFF token printing inside of GetNextToken
    public void setPrintToken(boolean on) {
        printToken = on;
    }

    /* @@@ */
    private void initReserveWords(ReserveTable reserveWords) {
        //  Student must provide the rest
        reserveWords.Add("GOTO", 0);
        reserveWords.Add("INTEGER", 1);
        reserveWords.Add("FLOAT", 2);
        reserveWords.Add("STRING", 3);
        reserveWords.Add("TO", 4);
        reserveWords.Add("DO", 5);
        reserveWords.Add("IF", 6);
        reserveWords.Add("THEN", 7);
        reserveWords.Add("ELSE", 8);
        reserveWords.Add("FOR", 9);
        reserveWords.Add("OF", 10);
        reserveWords.Add("WRITELN", 11);
        reserveWords.Add("READLN", 12);
        reserveWords.Add("BEGIN", 13);
        reserveWords.Add("END", 14);
        reserveWords.Add("VAR", 15);
        reserveWords.Add("DOWHILE", 16);
        reserveWords.Add("UNIT", 17);
        reserveWords.Add("LABEL", 18);
        reserveWords.Add("REPEAT", 19);
        reserveWords.Add("UNTIL", 20);
        reserveWords.Add("PROCEDURE", 21);
        reserveWords.Add("DOWNTO", 22);
        reserveWords.Add("FUNCTION", 23);
        reserveWords.Add("RETURN", 24);
        reserveWords.Add("ARRAY", 25);
        reserveWords.Add("WRITE", 26);
        reserveWords.Add("UNDEFINED", 99);
        reserveWords.Add("IDENTIFIER", 50);
        reserveWords.Add("INTEGER CONSTANT", 51);
        reserveWords.Add("FLOAT CONSTANT", 52);
        reserveWords.Add("STRING CONSTANT", 53);

        //1 and 2-char
        reserveWords.Add("/", 30);
        reserveWords.Add("*", 31);
        reserveWords.Add("+", 32);
        reserveWords.Add("-", 33);
        reserveWords.Add("(", 34);
        reserveWords.Add(")", 35);
        reserveWords.Add(";", 36);
        reserveWords.Add(":=", 37);
        reserveWords.Add(">", 38);
        reserveWords.Add("<", 39);
        reserveWords.Add(">=", 40);
        reserveWords.Add("<=", 41);
        reserveWords.Add("=", 42);
        reserveWords.Add("<>", 43);
        reserveWords.Add(",", 44);
        reserveWords.Add("[", 45);
        reserveWords.Add("]", 46);
        reserveWords.Add(":", 47);
        reserveWords.Add(".", 48);

    }
    /* @@@ */
    private void initMnemonics(ReserveTable mnemonics) {
        // Student must create their own 5-char mnemonics
        mnemonics.Add("MOVTO", 0);
        mnemonics.Add("ITYPE", 1);
        mnemonics.Add("FTYPE", 2);
        mnemonics.Add("STYPE", 3);
        mnemonics.Add("TRGTO", 4);
        mnemonics.Add("PERFM", 5);
        mnemonics.Add("CNDTN", 6);
        mnemonics.Add("HENCE", 7);
        mnemonics.Add("OTHRW", 8);
        mnemonics.Add("FORLP", 9);
        mnemonics.Add("BELNG", 10);
        mnemonics.Add("WRTLN", 11);
        mnemonics.Add("FETCH", 12);
        mnemonics.Add("BEGIN", 13);
        mnemonics.Add("STOPP", 14);
        mnemonics.Add("VARBL", 15);
        mnemonics.Add("DOWHI", 16);
        mnemonics.Add("UNITT", 17);
        mnemonics.Add("LABEL", 18);
        mnemonics.Add("RPEAT", 19);
        mnemonics.Add("UNTIL", 20);
        mnemonics.Add("PRCDR", 21);
        mnemonics.Add("DOWNT", 22);
        mnemonics.Add("FUNCT", 23);
        mnemonics.Add("RETRN", 24);
        mnemonics.Add("ARRAY", 25);
        mnemonics.Add("WRITE", 26);
        mnemonics.Add("INTGR", 51);
        mnemonics.Add("FLOAT", 52);
        mnemonics.Add("STRNG", 53);
        //1 and 2-char
        mnemonics.Add("DIVID", 30);
        mnemonics.Add("MULTI", 31);
        mnemonics.Add("PLUSS", 32);
        mnemonics.Add("MINUS", 33);
        mnemonics.Add("LPARN", 34);
        mnemonics.Add("RPARN", 35);
        mnemonics.Add("SEMIC", 36);
        mnemonics.Add("ASIGN", 37);
        mnemonics.Add("GREAT", 38);
        mnemonics.Add("LSTHN", 39);
        mnemonics.Add("GTEQL", 40);
        mnemonics.Add("LTEQL", 41);
        mnemonics.Add("EQUAL", 42);
        mnemonics.Add("NTEQL", 43);
        mnemonics.Add("COMMA", 44);
        mnemonics.Add("LBRAC", 45);
        mnemonics.Add("RBRAC", 46);
        mnemonics.Add("COLON", 47);
        mnemonics.Add("PRIOD", 48);
        mnemonics.Add("IDENT", 50);
        mnemonics.Add("UNDEF", 99);
    }

    // ********************** UTILITY FUNCTIONS
    private void consoleShowError(String message) {
        System.out.println("**** ERROR FOUND: " + message);
    }
    private void consoleShowWarning(String message) { System.out.println("**** WARNING: " + message);}

    // Character category for alphabetic chars
    private boolean isLetter(char ch) {
        return (((ch >= 'A') && (ch <= 'Z')) || ((ch >= 'a') && (ch <=
                'z')));
    }
    // Character category for 0..9
    private boolean isDigit(char ch) {
        return ((ch >= '0') && (ch <= '9'));
    }
    // Category for any whitespace to be skipped over
    private boolean isWhitespace(char ch) {
    // SPACE, TAB, NEWLINE are white space
        return ((ch == ' ') || (ch == '\t') || (ch == '\n'));
    }
    // Returns the VALUE of the next character without removing it fromthe
    // input line.  Useful for checking 2-character tokens that startwith
    //    a 1-character token.
    private char PeekNextChar() {
        char result = ' ';
        if ((needLine) || (EOF)) {
            result = ' '; //at end of line, so nothing
        } else //
        {
            if ((linePos + 1) < line.length()) { //have a char to peek
                result = line.charAt(linePos + 1);
            }
        }
        return result;
    }
    // Called by GetNextChar when the characters in the current line are used up.
    // STUDENT CODE SHOULD NOT EVER CALL THIS!
    private void GetNextLine() {
        try {
            line = bufferedreader.readLine();
            if ((line != null) && (echo)) {
                lineCount++;
                System.out.println(String.format("%04d", lineCount) + " "
                        + line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (line == null) {    // The readLine returns null at EOF, set flag
                    EOF = true;
        }
        linePos = -1;      // reset vars for new line if we have one
        needLine = false;  // we have one, no need
        //the line is ready for the next call to get a character
    }
        // Called to get the next character from file, automatically gets a new
        //      line when needed. CALL THIS TO GET CHARACTERS FOR GETIDENT etc.
    public char GetNextChar() {
        char result;
        if (needLine) //ran out last time we got a char, so get a new line
        {
            GetNextLine();
        }
        //try to get char from line buff
        if (EOF) {
            result = '\n';
            needLine = false;
        } else {
            if ((linePos < line.length() - 1)) { //have a character available
                linePos++;
                result = line.charAt(linePos);
            } else { //need a new line, but want to return eoln on this call first
                result = '\n';
                needLine = true; //will read a new line on next GetNextChar call
            }
        }
        return result;
    }
    // The constants below allow flexible comment start/end characters
    final char commentStart_1 = '{';
    final char commentEnd_1 = '}';
    final char commentStart_2 = '(';
    final char commentPairChar = '*';
    final char commentEnd_2 = ')';
    // Skips past single and multi-line comments, and outputs UNTERMINATED
    //  COMMENT when end of line is reached before terminating
    String unterminatedComment = "Comment not terminated before End Of File";
    public char skipComment(char curr) {
        if (curr == commentStart_1) {
            curr = GetNextChar();
            while ((curr != commentEnd_1) && (!EOF)) {
                curr = GetNextChar();
            }
            if (EOF) {
                consoleShowError(unterminatedComment);
            } else {
                curr = GetNextChar();
            }
        } else {
            if ((curr == commentStart_2) && (PeekNextChar() == commentPairChar)) {
                curr = GetNextChar(); // get the second
                curr = GetNextChar(); // into comment or end of comment
                while ((!((curr == commentPairChar) && (PeekNextChar() == commentEnd_2))) && (!EOF)) {
                    curr = GetNextChar();
                }

                if (EOF) {
                    consoleShowError(unterminatedComment);
                } else {

                    curr = GetNextChar();          //must move past close
                    curr = GetNextChar();          //must get following
                }
            }
        }
            return (curr);
    }
    // Reads past all whitespace as defined by isWhiteSpace
    // NOTE THAT COMMENTS ARE SKIPPED AS WHITESPACE AS WELL!
    public char skipWhiteSpace() {
        do {
            while ((isWhitespace(currCh)) && (!EOF)) {
                currCh = GetNextChar();
            }
            currCh = skipComment(currCh);
        } while (isWhitespace(currCh) && (!EOF));
        return currCh;
    }
    private boolean isPrefix(char ch) {
        return ((ch == ':') || (ch == '<') || (ch == '>') || (ch == '='));
    }
    private boolean isStringStart(char ch) {
        return ch == '"';
    }

    // truncates lexeme to length if necessary, and displays error message
    private String truncateIfNecessary(String lexeme, int length) {
        if (lexeme.length() > length) {
            lexeme = lexeme.substring(0, length);
            consoleShowWarning("Lexeme truncated to " + length + " characters");
        }
        return lexeme;
    }

    // Returns the code for the given mnemonic
    public int codeFor(String mnemonic) {
        return mnemonics.LookupName(mnemonic);
    }

    //global char
    char currCh;

    // get the identifier
    private token getIdentifier() {
        // create a new token
        token result = new token();
        // get the first character
        result.lexeme = "" + currCh; //have the first char
        currCh = GetNextChar();
        // loop until not a letter, digit, or underscore
        while (isLetter(currCh) || (isDigit(currCh)) || (currCh == '_')) {
            result.lexeme = result.lexeme + currCh; //extend lexeme
            currCh = GetNextChar();
        }
        // end of identifier, so look up in reserved words
        result.code = reserveWords.LookupName(result.lexeme);
        // if not found, set code to IDENT
        if (result.code == reserveWords.NOTFOUND) {
            result.code = codeFor("IDENT");
            // truncate if necessary
            result.lexeme = truncateIfNecessary(result.lexeme, MAX_IDENT_LENGTH);
            // add to symbol table if not already there
            if(saveSymbols.LookupSymbol(result.lexeme)==saveSymbols.NOTFOUND){
                //saveSymbols.AddSymbol(result.lexeme, VAR, INIT_VALUE);
            }
        }
        // set mnemonic
        result.mnemonic = mnemonics.LookupCode(result.code);

        return result;
    }

    // get a number, integer or float
    private token getNumber() {
        /* a number is:   <digit>+[.<digit>*[E<digit>+]] */
        token result = new token();
        result.lexeme = "" ;

        // set code to INTEGER, change to FLOAT if needed
        result.code = codeFor("INTGR");
        // loop to get digits
        while (isDigit(currCh)) {
            result.lexeme += currCh; //extend lexeme
            currCh = GetNextChar();
        }

        // check for decimal point and loop to get digits
        if (currCh == '.') {
            result.lexeme += currCh; //extend lexeme
            currCh = GetNextChar();
            result.code = codeFor("FLOAT");
            while (isDigit(currCh)) {
                result.lexeme += currCh; //extend lexeme
                currCh = GetNextChar();
            }
        }

        // check for exponent and loop to get digits (if any)
        if (currCh == 'E') {
            result.lexeme += currCh; //extend lexeme
            currCh = GetNextChar();
            // set code to undefined if exponent is not followed by a digit
            result.code = codeFor("UNDEF");
            while (isDigit(currCh)) {
                result.code = codeFor("FLOAT");
                result.lexeme += currCh; //extend lexeme
                currCh = GetNextChar();
            }
        }

        // get the mnemonic for the code
        result.mnemonic = mnemonics.LookupCode(result.code);
        // if the number is not in the symbol table, add it
        if (saveSymbols.LookupSymbol(result.lexeme) == saveSymbols.NOTFOUND) {
            boolean isInteger = result.code == codeFor("INTGR");
            boolean isFloat = result.code == codeFor("FLOAT");
            String tempLexeme = "";
            // truncate integer or float if necessary
            if (isInteger) {
                tempLexeme = truncateIfNecessary(result.lexeme, MAX_INT_LENGTH);
            } else if (isFloat) {
                tempLexeme = truncateIfNecessary(result.lexeme, MAX_FLOAT_LENGTH);
            }
            // check if the number is valid and add it to the symbol table
            if (isInteger && integerOK(tempLexeme)) {
                saveSymbols.AddSymbol(tempLexeme, CONST, Integer.parseInt(tempLexeme));
            } else if (isFloat && doubleOK(tempLexeme)) {
                saveSymbols.AddSymbol(tempLexeme, CONST, Float.parseFloat(tempLexeme));
            } else {
                // if the number is not valid, display an error message
                String errorType = isInteger ? "integer" : "float";
                consoleShowError("Invalid " + errorType + " value at line " + lineCount);
            }
        }
        return result;
    }

    // getString - returns a token for a string
    private token getString() {
        token result = new token();
        result.lexeme = "";
        currCh = GetNextChar();
        // loop until the end of the string or the end of the file
        while (!needLine && (!EOF) && currCh != '"') {
            result.lexeme = result.lexeme + currCh; //extend lexeme
            currCh = GetNextChar();
        }
        // if a string was found, set the token code and if
        // not then set the token code to UNDEF
        if (currCh == '"') {
            result.code = codeFor("STRNG");
            currCh = GetNextChar();
            if (saveSymbols.LookupSymbol(result.lexeme) == saveSymbols.NOTFOUND) {
                saveSymbols.AddSymbol(result.lexeme, CONST, result.lexeme);
            }
        }  else {
            consoleShowError("Unterminated string");
            result.code = codeFor("UNDEF");
        }
        result.mnemonic = mnemonics.LookupCode(result.code);

        return result;
    }

    // getOtherToken - returns a token for any other character
    private token getOtherToken() {
        token result = new token();
        result.lexeme = "" + currCh;
        // checks to see if the current character is a prefix character
        if (isPrefix(currCh)) {
            // checks to see if a valid 2 char token can be made
            // if so then the current character is added to the lexeme
            if (currCh == ':' && PeekNextChar() == '=') {
                currCh = GetNextChar();
                result.lexeme += currCh;
            } else if (currCh == '<') {
                // checks to see if the next character is a '=' or '>'
                if (PeekNextChar() == '=' || PeekNextChar() == '>') {
                    currCh = GetNextChar();
                    result.lexeme += currCh;
                }
            } else if (currCh == '>' && PeekNextChar() == '=') {
                currCh = GetNextChar();
                result.lexeme += currCh;
            }
        }
        // sets code to the code of the lexeme
        int code = reserveWords.LookupName(result.lexeme);
        // sets the code to UNDEF if the lexeme is not in the reserved words
        result.code = (code != reserveWords.NOTFOUND) ? code : codeFor("UNDEF");
        // sets the mnemonic to the mnemonic of the code
        result.mnemonic = mnemonics.LookupCode(result.code);
        // gets the next character
        currCh = GetNextChar();
        return result;
    }
    // Checks to see if a string contains a valid DOUBLE
    public boolean doubleOK(String stin) {
        boolean result;
        Double x;
        try {
            x = Double.parseDouble(stin);
            result = true;
        } catch (NumberFormatException ex) {
            result = false;
        }
        return result;
    }
    // Checks the input string for a valid INTEGER
    public boolean integerOK(String stin) {
        boolean result;
        int x;
        try {
            x = Integer.parseInt(stin);
            result = true;
        } catch (NumberFormatException ex) {
            result = false;
        }
        return result;
    }

    public token GetNextToken() {
        //Create the object to be returned
        token result = new token();
        char ch;
        //Skip whitespace and comments, returning next char
        ch = skipWhiteSpace();

        // Get correct token category based on ch
        if (isLetter(ch)) { //is ident
            result = getIdentifier();
        }
        else
        if (isDigit(ch)) { //is numeric
            result = getNumber();
        }
        else
        if (isStringStart(ch)) { //string literal
            result = getString();
        }
        else { //default char checks
            result = getOtherToken();
        }
        //if ((result.lexeme.equals("")) ||(EOF))

        if (result != null) {

            if (printToken) {
                System.out.println("\t" + result.mnemonic + " | \t" +
                        String.format("%04d", result.code) + " | \t" + result.lexeme);
            }
        }
        return result;
    }

    public int getLineNumber() {
        return lineCount;
    }
}
