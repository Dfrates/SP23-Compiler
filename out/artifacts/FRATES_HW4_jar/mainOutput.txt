dfrates@Daniels-MacBook-Pro FRATES_HW4_jar % java -jar FRATES_HW4.jar LexicalTestSP23.txt SymboltableLexical.txt
Daniel Frates - CS 4100 - Spring 2023
Lexical for LexicalTestSP23.txt
0001
0002
0003
0004
0005 {Here is Lexical Test file 1 # *) which
0006   has a comment that
0007   spans 3 lines, followed by an empty comment }
0008 {}
0009
0010 amount:=1;
        IDENT |         0050 |  amount
        ASIGN |         0037 |  :=
        INTGR |         0051 |  1
        SEMIC |         0036 |  ;
0011 b:=a+b-c*21.7/22;
        IDENT |         0050 |  b
        ASIGN |         0037 |  :=
        IDENT |         0050 |  a
        PLUSS |         0032 |  +
        IDENT |         0050 |  b
        MINUS |         0033 |  -
        IDENT |         0050 |  c
        MULTI |         0031 |  *
        FLOAT |         0052 |  21.7
        DIVID |         0030 |  /
        INTGR |         0051 |  22
        SEMIC |         0036 |  ;
0012      123456789112345 (*this number is 15 chars, truncate int to 6 *)
**** ERROR FOUND: Lexeme truncated to 6 characters
        INTGR |         0051 |  123456789112345
0013      12.34567891134567 (*this number is 17 chars, but should be
**** ERROR FOUND: Lexeme truncated to 12 characters
        FLOAT |         0052 |  12.34567891134567
0014                         truncated to 12 in the symbol table*)
0015 hereisareallylongidentifierthatistoolong := 66;
**** ERROR FOUND: Lexeme truncated to 20 characters
        IDENT |         0050 |  hereisareallylongide
        ASIGN |         0037 |  :=
        INTGR |         0051 |  66
        SEMIC |         0036 |  ;
0016 hereisareallylongidentifierthatissameasabovewhentruncated := 76.5E-12;
**** ERROR FOUND: Lexeme truncated to 20 characters
        IDENT |         0050 |  hereisareallylongide
        ASIGN |         0037 |  :=
**** ERROR FOUND: Invalid float value
        UNDEF |         0099 |  76.5E
        MINUS |         0033 |  -
        INTGR |         0051 |  12
        SEMIC |         0036 |  ;
0017   109.E+10      12.33E5
**** ERROR FOUND: Invalid float value
        UNDEF |         0099 |  109.E
        PLUSS |         0032 |  +
        INTGR |         0051 |  10
        FLOAT |         0052 |  12.33E5
0018   12.4 E-2
        FLOAT |         0052 |  12.4
        IDENT |         0050 |  E
        MINUS |         0033 |  -
        INTGR |         0051 |  2
0019
0020    *) {<--Orphaned closed comment is just '*' and ')' returned as separate tokens}
        MULTI |         0031 |  *
        RPARN |         0035 |  )
0021            myString_1 : = "an unfinished string makes an error ;
        IDENT |         0050 |  myString_1
        COLON |         0047 |  :
        EQUAL |         0042 |  =
**** ERROR FOUND: Unterminated string
        UNDEF |         0099 |  an unfinished string makes an error ;
0022   test single #and two char tokens
        IDENT |         0050 |  test
        IDENT |         0050 |  single
        UNDEF |         0099 |  #
        IDENT |         0050 |  and
        IDENT |         0050 |  two
        IDENT |         0050 |  char
        IDENT |         0050 |  tokens
0023      # /*^&%+-  some more (   ) (**) ;:=><>=<==<>,[]:.
        UNDEF |         0099 |  #
        DIVID |         0030 |  /
        MULTI |         0031 |  *
        UNDEF |         0099 |  ^
        UNDEF |         0099 |  &
        UNDEF |         0099 |  %
        PLUSS |         0032 |  +
        MINUS |         0033 |  -
        IDENT |         0050 |  some
        IDENT |         0050 |  more
        LPARN |         0034 |  (
        RPARN |         0035 |  )
        SEMIC |         0036 |  ;
        ASIGN |         0037 |  :=
        GREAT |         0038 |  >
        NTEQL |         0043 |  <>
        EQUAL |         0042 |  =
        LTEQL |         0041 |  <=
        EQUAL |         0042 |  =
        NTEQL |         0043 |  <>
        COMMA |         0044 |  ,
        LBRAC |         0045 |  [
        RBRAC |         0046 |  ]
        COLON |         0047 |  :
        PRIOD |         0048 |  .
0024 (* mixed in reserve words
0025 below........................... *)  "but first is a good string"
        STRNG |         0024 |  but first is a good string
0026   GOTO JumpOut;  INTEGER TO DO
        MOVTO |         0000 |  GOTO
        IDENT |         0050 |  JumpOut
        SEMIC |         0036 |  ;
        INTGR |         0051 |  INTEGER
        TRGTO |         0002 |  TO
        PERFM |         0003 |  DO
0027    begin  if not then that else nothing
        BEGIN |         0011 |  begin
        CNDTN |         0004 |  if
        IDENT |         0050 |  not
        HENCE |         0005 |  then
        IDENT |         0050 |  that
        OTHRW |         0006 |  else
        IDENT |         0050 |  nothing
0028 THEN ELSE
        HENCE |         0005 |  THEN
        OTHRW |         0006 |  ELSE
0029 For I := 1 to 100.E7 of float do
        FORLP |         0007 |  For
        IDENT |         0050 |  I
        ASIGN |         0037 |  :=
        INTGR |         0051 |  1
        TRGTO |         0002 |  to
        FLOAT |         0052 |  100.E7
        BELNG |         0008 |  of
        FLOAT |         0052 |  float
        PERFM |         0003 |  do
0030     WRITELN
        WRITE |         0009 |  WRITELN
0031     BEGIN
        BEGIN |         0011 |  BEGIN
0032     END
        STOPP |         0012 |  END
0033   declare  ARRAY
        IDENT |         0050 |  declare
        ARRAY |         0025 |  ARRAY
0034    VAR DOWHILE  module UNIT Label  RePeaT  UNTIL done = TRUE;
        VARBL |         0013 |  VAR
        DOWHI |         0014 |  DOWHILE
        IDENT |         0050 |  module
        UNITT |         0015 |  UNIT
        LABEL |         0016 |  Label
        RPEAT |         0017 |  RePeaT
        UNTIL |         0018 |  UNTIL
        IDENT |         0050 |  done
        EQUAL |         0042 |  =
        IDENT |         0050 |  TRUE
        SEMIC |         0036 |  ;
0035
0036  PROCEDURE  FUNCTION DOWNTO does READLN   RETURN
        PRCDR |         0019 |  PROCEDURE
        FUNCT |         0021 |  FUNCTION
        DOWNT |         0020 |  DOWNTO
        IDENT |         0050 |  does
        FETCH |         0010 |  READLN
        RETRN |         0022 |  RETURN
0037    FLOAT
        FLOAT |         0052 |  FLOAT
0038    STRING
        STRNG |         0024 |  STRING
0039
0040 Beginning not reserve writeln.   !@#$%^&*()_+
        IDENT |         0050 |  Beginning
        IDENT |         0050 |  not
        IDENT |         0050 |  reserve
        WRITE |         0009 |  writeln
        PRIOD |         0048 |  .
        UNDEF |         0099 |  !
        UNDEF |         0099 |  @
        UNDEF |         0099 |  #
        UNDEF |         0099 |  $
        UNDEF |         0099 |  %
        UNDEF |         0099 |  ^
        UNDEF |         0099 |  &
        MULTI |         0031 |  *
        LPARN |         0034 |  (
        RPARN |         0035 |  )
        UNDEF |         0099 |  _
        PLUSS |         0032 |  +
0041 sum := 0.0;
        IDENT |         0050 |  sum
        ASIGN |         0037 |  :=
        FLOAT |         0052 |  0.0
        SEMIC |         0036 |  ;
0042 sum := sum + 2;
        IDENT |         0050 |  sum
        ASIGN |         0037 |  :=
        IDENT |         0050 |  sum
        PLUSS |         0032 |  +
        INTGR |         0051 |  2
        SEMIC |         0036 |  ;
0043 What if 2. is found?
        IDENT |         0050 |  What
        CNDTN |         0004 |  if
        FLOAT |         0052 |  2.
        IDENT |         0050 |  is
        IDENT |         0050 |  found
        UNDEF |         0099 |  ?
0044
0045 (* end of file comes
0046    before the end of this
0047    comment-- Throw an Error!
0048
0049
0050
**** ERROR FOUND: Comment not terminated before End Of File
Done.
